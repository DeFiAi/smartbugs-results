====================================================================================================
[1m[ ] Compiling Solidity contract from the file /unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol ... [0m[92m Done [0m
[91m[-] Contract SpinnerProcessor does NOT exist[0m

====================================================================================================
[1m[ ] Compiling Solidity contract from the file /unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol ... [0m[92m Done [0m
[91m[-] Contract Shared does NOT exist[0m

====================================================================================================
[1m[ ] Compiling Solidity contract from the file /unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol ... [0m/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:17:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:101:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SpinnerDatabase() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:263:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SpinnerFactory(address _spinnerDatabaseAddress) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:400:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SpinnerProcessor(address _spinnerFactoryAddress, address _spinnerDatabaseAddress, address _ownerAddress) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:35:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:33: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:91: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:91: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:58: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:33: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:91: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:91: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:58: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:226:85: Error: This type is only supported in the new experimental ABI encoder. Use "pragma experimental ABIEncoderV2;" to enable the feature.
    function getSpinnerData(address walletAddress, uint index) public view returns (Shared.Spinner) {
                                                                                    ^------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                ^---------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:17: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                ^---------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:80: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                                                                               ^----------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:80: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                                                                               ^----------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:280:81: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.

[91m[-] Cannot compile the contract [0m

====================================================================================================
[1m[ ] Compiling Solidity contract from the file /unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol ... [0m/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:17:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:101:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SpinnerDatabase() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:263:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SpinnerFactory(address _spinnerDatabaseAddress) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:400:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SpinnerProcessor(address _spinnerFactoryAddress, address _spinnerDatabaseAddress, address _ownerAddress) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:35:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:33: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:91: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:91: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:58: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:33: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:91: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:91: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:58: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:226:85: Error: This type is only supported in the new experimental ABI encoder. Use "pragma experimental ABIEncoderV2;" to enable the feature.
    function getSpinnerData(address walletAddress, uint index) public view returns (Shared.Spinner) {
                                                                                    ^------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                ^---------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:17: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                ^---------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:80: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                                                                               ^----------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:80: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                                                                               ^----------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:280:81: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));
                                                                                ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:280:81: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));
                                                                                ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:280:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));
                         ^----------------------------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:280:26: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));
                         ^----------------------------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:71: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 1) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:71: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 1) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:110: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 2) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:110: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 2) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:149: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 3) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:149: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 3) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:65: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 1) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:65: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 1) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:104: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 2) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:104: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 2) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:143: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 3) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:143: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 3) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:397:16: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        return this.balance;
               ^----------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:430:32: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.

[91m[-] Cannot compile the contract [0m

====================================================================================================
[1m[ ] Compiling Solidity contract from the file /unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol ... [0m/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:17:3: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
  function Ownable() public {
  ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:101:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SpinnerDatabase() public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:263:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SpinnerFactory(address _spinnerDatabaseAddress) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:400:5: Warning: Defining constructors as functions with the same name as the contract is deprecated. Use "constructor(...) { ... }" instead.
    function SpinnerProcessor(address _spinnerFactoryAddress, address _spinnerDatabaseAddress, address _ownerAddress) public {
    ^ (Relevant source part starts here and spans across multiple lines).
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:35:5: Warning: Invoking events without "emit" prefix is deprecated.
    OwnershipTransferred(owner, newOwner);
    ^-----------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:33: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:91: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:91: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:113:58: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:33: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:33: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                ^--------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:91: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:91: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                                                          ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:58: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:127:58: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint256 _id = uint(uint(keccak256(_type)) + uint(keccak256(block.timestamp + uint(keccak256(msg.sender)))));
                                                         ^------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:226:85: Error: This type is only supported in the new experimental ABI encoder. Use "pragma experimental ABIEncoderV2;" to enable the feature.
    function getSpinnerData(address walletAddress, uint index) public view returns (Shared.Spinner) {
                                                                                    ^------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:17: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                ^---------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:17: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                ^---------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:80: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                                                                               ^----------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:237:80: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
            if (keccak256(SpinnersByAddress[walletAddress][i].spinnerOwner) == keccak256(walletAddress)) {
                                                                               ^----------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:280:81: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));
                                                                                ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:280:81: Warning: The provided argument of type address is not implicitly convertible to expected type bytes memory.
        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));
                                                                                ^-------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:280:26: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));
                         ^----------------------------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:280:26: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
        uint rand = uint(keccak256(uint(block.blockhash(block.number-1)) + uint(keccak256(msg.sender))));
                         ^----------------------------------------------------------------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:71: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 1) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:71: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 1) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:110: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 2) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:110: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 2) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:149: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 3) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:288:149: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 3) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:65: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 1) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:65: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 1) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:104: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 2) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:104: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 2) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:143: Warning: This function only accepts a single "bytes" argument. Please use "abi.encodePacked(...)" or a similar function to encode the data.
 ... keccak256(_seed + 3) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:296:143: Warning: The provided argument of type uint256 is not implicitly convertible to expected type bytes memory.
 ... keccak256(_seed + 3) ... 
     ^------------------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:397:16: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        return this.balance;
               ^----------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:430:32: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        uint contractBalance = this.balance;
                               ^----------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:437:33: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.
        require(ownerBalance <= this.balance);
                                ^----------^
/unique_chucks/13/0x84cd488424c0432fabc4a144289f1ec86d59c88a.sol:443:31: Warning: Using contract member "balance" inherited from the address type is deprecated. Convert the contract to "address" type to access the member, for example use "address(contract).balance" instead.

[91m[-] Cannot compile the contract [0m