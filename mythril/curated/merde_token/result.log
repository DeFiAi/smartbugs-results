{"error": null, "issues": [{"address": 2040, "code": "bonusCodes.length--", "debug": "storage_5: 0x0\nstorage_0: 0x0\ncaller: 0x0\ncalldata_MerdeToken_0: 0xcdc6002100000000000000000000000000000000000000000000000000000000\ncalldatasize_MerdeToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer underflow exists in the function `popBonusCode()`.\nThe subtraction may result in a value < 0.", "filename": "/dataset/arithmetic/merde_token.sol", "function": "popBonusCode()", "lineno": 72, "title": "Integer Underflow", "type": "Warning"}, {"address": 2411, "code": "github.com/Arachni", "debug": "storage_5: 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nstorage_0: 0x0\ncaller: 0x0\ncalldata_MerdeToken_0: 0xd456118a00000000000000000000000000000000000000000000000000000000\ncalldatasize_MerdeToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `pushBonusCode(uint256)`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/dataset/arithmetic/merde_token.sol", "function": "pushBonusCode(uint256)", "lineno": 2, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2462, "code": "uint[] public bonusCodes", "debug": "The exception is triggered under the following conditions:\n\ncalldata_MerdeToken_4: 0x0\nstorage_5: 0x0\ncalldata_MerdeToken_0: 0xd7d1344100000000000000000000000000000000000000000000000000000000\ncalldatasize_MerdeToken: 0x4\ncallvalue: 0x0\n", "description": "A reachable exception (opcode 0xfe) has been detected. This can be caused by type errors, division by zero, out-of-bounds array access, or assert violations. This is acceptable in most situations. Note however that `assert()` should only be used to check invariants. Use `require()` for regular input checking. ", "filename": "/dataset/arithmetic/merde_token.sol", "function": "_function_0xd7d13441", "lineno": 64, "title": "Exception state", "type": "Informational"}, {"address": 2521, "code": "contract MerdeToken {\n     address public owner;\n     address public trustedThirdParty;\n\n     function MerdeToken(address _trustedThirdParty) {\n         owner = msg.sender;\n         trustedThirdParty = _trustedThirdParty;\n     }\n\n     modifier onlyOwner {\n         require(msg.sender == owner);\n         _;\n     }\n\n     modifier onlyTrustedThirdParty {\n         require(msg.sender == trustedThirdParty);\n         _;\n     }\n\n\n     mapping (address => uint) public balanceOf;\n     uint public deposited;\n     uint public withdrawLimit;\n\n     function deposit() payable {\n         require(deposited + msg.value > deposited);\n         require(balanceOf[msg.sender] + msg.value > balanceOf[msg.sender]); // Check for overflows\n         balanceOf[msg.sender] += msg.value;\n         deposited += msg.value;\n     }\n\n     function balanceOf(address owner) constant returns (uint balance) {\n         return balanceOf[owner];\n     }\n\n     function transfer(address to, uint value) {\n         require(balanceOf[msg.sender] >= value);\n         require(balanceOf[to] + value > balanceOf[to]); // Check for overflows\n         balanceOf[msg.sender] -= value;\n         balanceOf[to] += value;\n     }\n\n     function setWithdrawLimit(uint newWithdrawLimit) onlyTrustedThirdParty {\n         withdrawLimit = newWithdrawLimit;\n     }\n\n     function withdraw(uint amount) onlyOwner {\n         require(amount <= withdrawLimit);\n         require(amount <= deposited);\n         deposited -= amount;\n         withdrawLimit -= amount;\n         msg.sender.transfer(amount);\n     }\n\n\n\n     uint[] public bonusCodes;\n\n     function pushBonusCode(uint code) onlyOwner {\n         bonusCodes.push(code);\n     }\n\n     function popBonusCode() onlyOwner {\n         require(bonusCodes.length >= 0);\n         bonusCodes.length--; // No pop() method?\n     }\n\n     function modifyBonusCode(uint index, uint update) onlyOwner {\n         require(index < bonusCodes.length);\n         bonusCodes[index] = update;\n     }\n }", "debug": "storage_5: 0xfcfc48138602003e39ee04f00000000079fd8efa000000000000000000008000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_MerdeToken_0: 0xcdc6002100000000000000000000000000000000000000000000000000000000\ncalldatasize_MerdeToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `popBonusCode()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/dataset/arithmetic/merde_token.sol", "function": "popBonusCode()", "lineno": 8, "title": "Integer Overflow ", "type": "Warning"}, {"address": 2523, "code": "contract MerdeToken {\n     address public owner;\n     address public trustedThirdParty;\n\n     function MerdeToken(address _trustedThirdParty) {\n         owner = msg.sender;\n         trustedThirdParty = _trustedThirdParty;\n     }\n\n     modifier onlyOwner {\n         require(msg.sender == owner);\n         _;\n     }\n\n     modifier onlyTrustedThirdParty {\n         require(msg.sender == trustedThirdParty);\n         _;\n     }\n\n\n     mapping (address => uint) public balanceOf;\n     uint public deposited;\n     uint public withdrawLimit;\n\n     function deposit() payable {\n         require(deposited + msg.value > deposited);\n         require(balanceOf[msg.sender] + msg.value > balanceOf[msg.sender]); // Check for overflows\n         balanceOf[msg.sender] += msg.value;\n         deposited += msg.value;\n     }\n\n     function balanceOf(address owner) constant returns (uint balance) {\n         return balanceOf[owner];\n     }\n\n     function transfer(address to, uint value) {\n         require(balanceOf[msg.sender] >= value);\n         require(balanceOf[to] + value > balanceOf[to]); // Check for overflows\n         balanceOf[msg.sender] -= value;\n         balanceOf[to] += value;\n     }\n\n     function setWithdrawLimit(uint newWithdrawLimit) onlyTrustedThirdParty {\n         withdrawLimit = newWithdrawLimit;\n     }\n\n     function withdraw(uint amount) onlyOwner {\n         require(amount <= withdrawLimit);\n         require(amount <= deposited);\n         deposited -= amount;\n         withdrawLimit -= amount;\n         msg.sender.transfer(amount);\n     }\n\n\n\n     uint[] public bonusCodes;\n\n     function pushBonusCode(uint code) onlyOwner {\n         bonusCodes.push(code);\n     }\n\n     function popBonusCode() onlyOwner {\n         require(bonusCodes.length >= 0);\n         bonusCodes.length--; // No pop() method?\n     }\n\n     function modifyBonusCode(uint index, uint update) onlyOwner {\n         require(index < bonusCodes.length);\n         bonusCodes[index] = update;\n     }\n }", "debug": "storage_5: 0xfce0000000000000000000000000004800000010000000000000000000000000\nstorage_0: 0x0\ncaller: 0x0\ncalldata_MerdeToken_0: 0xcdc6002100000000000000000000000000000000000000000000000000000000\ncalldatasize_MerdeToken: 0x4\ncallvalue: 0x0\n", "description": "A possible integer overflow exists in the function `popBonusCode()`.\nThe addition or multiplication may result in a value higher than the maximum representable integer.", "filename": "/dataset/arithmetic/merde_token.sol", "function": "popBonusCode()", "lineno": 8, "title": "Integer Overflow ", "type": "Warning"}], "success": true}