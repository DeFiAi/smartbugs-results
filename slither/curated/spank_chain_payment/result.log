INFO:Detectors:[91m
LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#492-543) sends eth to arbitrary user
	Dangerous calls:
	- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/dataset/reentrancy/spank_chain_payment.sol#531)
	- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/dataset/reentrancy/spank_chain_payment.sol#532)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#functions-that-send-ether-to-arbitrary-destinations[0m
INFO:Detectors:[91m
Reentrancy in LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434):
	External calls:
	- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],Channels[_lcID].erc20Balances[0]),CreateChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#427)
	External calls sending eth:
	- Channels[_lcID].partyAddresses[0].transfer(Channels[_lcID].ethBalances[0]) (/dataset/reentrancy/spank_chain_payment.sol#424)
	State variables written after the call(s):
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#433)
Reentrancy in LedgerChannel.byzantineCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#753-814):
	External calls:
	- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#800-803)
	- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#804-807)
	External calls sending eth:
	- channel.partyAddresses[0].transfer(ethbalanceA) (/dataset/reentrancy/spank_chain_payment.sol#795)
	- channel.partyAddresses[1].transfer(ethbalanceI) (/dataset/reentrancy/spank_chain_payment.sol#796)
	State variables written after the call(s):
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#810)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities[0m
INFO:Detectors:[93m
ECTools.recoverSigner (/dataset/reentrancy/spank_chain_payment.sol#61-87) is declared view but contains assembly code
ECTools.uintToBytes32 (/dataset/reentrancy/spank_chain_payment.sol#131-134) is declared view but contains assembly code
LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816-831) is declared view but contains assembly code
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#constant-functions-changing-the-state[0m
INFO:Detectors:[93m
LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434) uses a dangerous strict equality:
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434) uses a dangerous strict equality:
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816-831) uses a dangerous strict equality:
	- cursor == _root
LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434) uses a dangerous strict equality:
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816-831) uses a dangerous strict equality:
	- cursor == _root
LedgerChannel.closeVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#722-749) uses a dangerous strict equality:
	- virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]
	- virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]
LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434) uses a dangerous strict equality:
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816-831) uses a dangerous strict equality:
	- cursor == _root
LedgerChannel.closeVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#722-749) uses a dangerous strict equality:
	- virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]
	- virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]
LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#492-543) uses a dangerous strict equality:
	- require(bool)(Channels[_lcID].isOpen == true)
	- require(bool)(totalEthDeposit == _balances[0] + _balances[1])
	- require(bool)(totalTokenDeposit == _balances[2] + _balances[3])
	- require(bool)(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))
	- require(bool)(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))
LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434) uses a dangerous strict equality:
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816-831) uses a dangerous strict equality:
	- cursor == _root
LedgerChannel.closeVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#722-749) uses a dangerous strict equality:
	- virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]
	- virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]
LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#492-543) uses a dangerous strict equality:
	- require(bool)(Channels[_lcID].isOpen == true)
	- require(bool)(totalEthDeposit == _balances[0] + _balances[1])
	- require(bool)(totalTokenDeposit == _balances[2] + _balances[3])
	- require(bool)(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))
	- require(bool)(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))
LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#379-417) uses a dangerous strict equality:
	- require(bool,string)(Channels[_lcID].partyAddresses[0] == address(0),Channel has already been created.)
LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434) uses a dangerous strict equality:
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816-831) uses a dangerous strict equality:
	- cursor == _root
LedgerChannel.closeVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#722-749) uses a dangerous strict equality:
	- virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]
	- virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]
LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#492-543) uses a dangerous strict equality:
	- require(bool)(Channels[_lcID].isOpen == true)
	- require(bool)(totalEthDeposit == _balances[0] + _balances[1])
	- require(bool)(totalTokenDeposit == _balances[2] + _balances[3])
	- require(bool)(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))
	- require(bool)(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))
LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#379-417) uses a dangerous strict equality:
	- require(bool,string)(Channels[_lcID].partyAddresses[0] == address(0),Channel has already been created.)
LedgerChannel.deposit (/dataset/reentrancy/spank_chain_payment.sol#462-489) uses a dangerous strict equality:
	- require(bool,string)(Channels[_lcID].isOpen == true,Tried adding funds to a closed channel)
	- require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1])
	- require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1])
	- Channels[_lcID].partyAddresses[0] == recipient
	- Channels[_lcID].partyAddresses[1] == recipient
LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434) uses a dangerous strict equality:
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816-831) uses a dangerous strict equality:
	- cursor == _root
LedgerChannel.closeVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#722-749) uses a dangerous strict equality:
	- virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]
	- virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]
LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#492-543) uses a dangerous strict equality:
	- require(bool)(Channels[_lcID].isOpen == true)
	- require(bool)(totalEthDeposit == _balances[0] + _balances[1])
	- require(bool)(totalTokenDeposit == _balances[2] + _balances[3])
	- require(bool)(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))
	- require(bool)(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))
LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#379-417) uses a dangerous strict equality:
	- require(bool,string)(Channels[_lcID].partyAddresses[0] == address(0),Channel has already been created.)
LedgerChannel.deposit (/dataset/reentrancy/spank_chain_payment.sol#462-489) uses a dangerous strict equality:
	- require(bool,string)(Channels[_lcID].isOpen == true,Tried adding funds to a closed channel)
	- require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1])
	- require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1])
	- Channels[_lcID].partyAddresses[0] == recipient
	- Channels[_lcID].partyAddresses[1] == recipient
LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#612-654) uses a dangerous strict equality:
	- require(bool)(_isContained(_initState,_proof,Channels[_lcID].VCrootHash) == true)
LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434) uses a dangerous strict equality:
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[0] && Channels[_lcID].isOpen == false)
LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816-831) uses a dangerous strict equality:
	- cursor == _root
LedgerChannel.closeVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#722-749) uses a dangerous strict equality:
	- virtualChannels[_vcID].partyA == Channels[_lcID].partyAddresses[0]
	- virtualChannels[_vcID].partyB == Channels[_lcID].partyAddresses[0]
LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#492-543) uses a dangerous strict equality:
	- require(bool)(Channels[_lcID].isOpen == true)
	- require(bool)(totalEthDeposit == _balances[0] + _balances[1])
	- require(bool)(totalTokenDeposit == _balances[2] + _balances[3])
	- require(bool)(Channels[_lcID].partyAddresses[0] == ECTools.recoverSigner(_state,_sigA))
	- require(bool)(Channels[_lcID].partyAddresses[1] == ECTools.recoverSigner(_state,_sigI))
LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#379-417) uses a dangerous strict equality:
	- require(bool,string)(Channels[_lcID].partyAddresses[0] == address(0),Channel has already been created.)
LedgerChannel.deposit (/dataset/reentrancy/spank_chain_payment.sol#462-489) uses a dangerous strict equality:
	- require(bool,string)(Channels[_lcID].isOpen == true,Tried adding funds to a closed channel)
	- require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1])
	- require(bool)(recipient == Channels[_lcID].partyAddresses[0] || recipient == Channels[_lcID].partyAddresses[1])
	- Channels[_lcID].partyAddresses[0] == recipient
	- Channels[_lcID].partyAddresses[1] == recipient
LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#612-654) uses a dangerous strict equality:
	- require(bool)(_isContained(_initState,_proof,Channels[_lcID].VCrootHash) == true)
LedgerChannel.joinChannel (/dataset/reentrancy/spank_chain_payment.sol#436-457) uses a dangerous strict equality:
	- require(bool)(Channels[_lcID].isOpen == false)
	- require(bool)(msg.sender == Channels[_lcID].partyAddresses[1])
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#dangerous-strict-equalities[0m
INFO:Detectors:[93m
Reentrancy in LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#379-417):
	External calls:
	- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),CreateChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#405)
	State variables written after the call(s):
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#406)
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#409)
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#410)
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#413)
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#414)
Reentrancy in LedgerChannel.deposit (/dataset/reentrancy/spank_chain_payment.sol#462-489):
	External calls:
	- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#470)
	State variables written after the call(s):
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#471)
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#484)
Reentrancy in LedgerChannel.deposit (/dataset/reentrancy/spank_chain_payment.sol#462-489):
	External calls:
	- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#470)
	- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balance),deposit: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#480)
	State variables written after the call(s):
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#481)
Reentrancy in LedgerChannel.joinChannel (/dataset/reentrancy/spank_chain_payment.sol#436-457):
	External calls:
	- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),joinChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#446)
	State variables written after the call(s):
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#447)
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#450)
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#451)
	- Channels (/dataset/reentrancy/spank_chain_payment.sol#453)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-1[0m
INFO:Detectors:[92m
Reentrancy in LedgerChannel.byzantineCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#753-814):
	External calls:
	- require(bool,string)(channel.token.transfer(channel.partyAddresses[0],tokenbalanceA),byzantineCloseChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#800-803)
	- require(bool,string)(channel.token.transfer(channel.partyAddresses[1],tokenbalanceI),byzantineCloseChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#804-807)
	External calls sending eth:
	- channel.partyAddresses[0].transfer(ethbalanceA) (/dataset/reentrancy/spank_chain_payment.sol#795)
	- channel.partyAddresses[1].transfer(ethbalanceI) (/dataset/reentrancy/spank_chain_payment.sol#796)
	State variables written after the call(s):
	- numChannels (/dataset/reentrancy/spank_chain_payment.sol#811)
Reentrancy in LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#492-543):
	External calls:
	- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[0],_balances[2]),happyCloseChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#536)
	- require(bool,string)(Channels[_lcID].token.transfer(Channels[_lcID].partyAddresses[1],_balances[3]),happyCloseChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#537)
	External calls sending eth:
	- Channels[_lcID].partyAddresses[0].transfer(_balances[0]) (/dataset/reentrancy/spank_chain_payment.sol#531)
	- Channels[_lcID].partyAddresses[1].transfer(_balances[1]) (/dataset/reentrancy/spank_chain_payment.sol#532)
	State variables written after the call(s):
	- numChannels (/dataset/reentrancy/spank_chain_payment.sol#540)
Reentrancy in LedgerChannel.joinChannel (/dataset/reentrancy/spank_chain_payment.sol#436-457):
	External calls:
	- require(bool,string)(Channels[_lcID].token.transferFrom(msg.sender,this,_balances[1]),joinChannel: token transfer failure) (/dataset/reentrancy/spank_chain_payment.sol#446)
	State variables written after the call(s):
	- numChannels (/dataset/reentrancy/spank_chain_payment.sol#454)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#reentrancy-vulnerabilities-2[0m
INFO:Detectors:[92m
ECTools.recoverSigner uses assembly (/dataset/reentrancy/spank_chain_payment.sol#61-87)
	- /dataset/reentrancy/spank_chain_payment.sol#75-80
ECTools.uintToBytes32 uses assembly (/dataset/reentrancy/spank_chain_payment.sol#131-134)
	- /dataset/reentrancy/spank_chain_payment.sol#133-134
LedgerChannel._isContained uses assembly (/dataset/reentrancy/spank_chain_payment.sol#816-831)
	- /dataset/reentrancy/spank_chain_payment.sol#821-823
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#assembly-usage[0m
INFO:Detectors:[92m
HumanStandardToken.version should be constant (/dataset/reentrancy/spank_chain_payment.sol#235)
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#state-variables-that-could-be-declared-constant[0m
INFO:Detectors:[92m
StandardToken.balanceOf (/dataset/reentrancy/spank_chain_payment.sol#204-206) should be declared external
Token.balanceOf (/dataset/reentrancy/spank_chain_payment.sol#27) should be declared external
Token.transfer (/dataset/reentrancy/spank_chain_payment.sol#33) should be declared external
StandardToken.transfer (/dataset/reentrancy/spank_chain_payment.sol#181-191) should be declared external
StandardToken.transferFrom (/dataset/reentrancy/spank_chain_payment.sol#193-202) should be declared external
Token.transferFrom (/dataset/reentrancy/spank_chain_payment.sol#40) should be declared external
Token.approve (/dataset/reentrancy/spank_chain_payment.sol#46) should be declared external
StandardToken.approve (/dataset/reentrancy/spank_chain_payment.sol#208-212) should be declared external
StandardToken.allowance (/dataset/reentrancy/spank_chain_payment.sol#214-216) should be declared external
Token.allowance (/dataset/reentrancy/spank_chain_payment.sol#51) should be declared external
ECTools.isSignedBy (/dataset/reentrancy/spank_chain_payment.sol#90-94) should be declared external
ECTools.toEthereumSignedMessage (/dataset/reentrancy/spank_chain_payment.sol#138-143) should be declared external
HumanStandardToken.approveAndCall (/dataset/reentrancy/spank_chain_payment.sol#251-260) should be declared external
LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#379-417) should be declared external
LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419-434) should be declared external
LedgerChannel.joinChannel (/dataset/reentrancy/spank_chain_payment.sol#436-457) should be declared external
LedgerChannel.deposit (/dataset/reentrancy/spank_chain_payment.sol#462-489) should be declared external
LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#492-543) should be declared external
LedgerChannel.updateLCstate (/dataset/reentrancy/spank_chain_payment.sol#547-609) should be declared external
LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#612-654) should be declared external
LedgerChannel.settleVC (/dataset/reentrancy/spank_chain_payment.sol#659-720) should be declared external
LedgerChannel.closeVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#722-749) should be declared external
LedgerChannel.byzantineCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#753-814) should be declared external
LedgerChannel.getChannel (/dataset/reentrancy/spank_chain_payment.sol#834-863) should be declared external
LedgerChannel.getVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#865-892) should be declared external
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#public-function-that-could-be-declared-as-external[0m
INFO:Detectors:[92m
Detected issues with version pragma in /dataset/reentrancy/spank_chain_payment.sol:
	- pragma solidity^0.4.23 (/dataset/reentrancy/spank_chain_payment.sol#8): it allows old versions
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#incorrect-version-of-solidity[0m
INFO:Detectors:[92m
Low level call in HumanStandardToken.approveAndCall (/dataset/reentrancy/spank_chain_payment.sol#251-260):
	-require(bool)(_spender.call(bytes4(bytes32(keccak256()(receiveApproval(address,uint256,address,bytes)))),msg.sender,_value,this,_extraData)) /dataset/reentrancy/spank_chain_payment.sol#258
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#low-level-calls[0m
INFO:Detectors:[92m
Parameter '_hashedMsg' of ECTools.recoverSigner (/dataset/reentrancy/spank_chain_payment.sol#61) is not in mixedCase
Parameter '_sig' of ECTools.recoverSigner (/dataset/reentrancy/spank_chain_payment.sol#61) is not in mixedCase
Parameter '_hashedMsg' of ECTools.isSignedBy (/dataset/reentrancy/spank_chain_payment.sol#90) is not in mixedCase
Parameter '_sig' of ECTools.isSignedBy (/dataset/reentrancy/spank_chain_payment.sol#90) is not in mixedCase
Parameter '_addr' of ECTools.isSignedBy (/dataset/reentrancy/spank_chain_payment.sol#90) is not in mixedCase
Parameter '_hexstr' of ECTools.hexstrToBytes (/dataset/reentrancy/spank_chain_payment.sol#97) is not in mixedCase
Parameter '_char' of ECTools.parseInt16Char (/dataset/reentrancy/spank_chain_payment.sol#115) is not in mixedCase
Parameter '_msg' of ECTools.toEthereumSignedMessage (/dataset/reentrancy/spank_chain_payment.sol#138) is not in mixedCase
Parameter '_uint' of ECTools.uintToString (/dataset/reentrancy/spank_chain_payment.sol#146) is not in mixedCase
Parameter '_str' of ECTools.substring (/dataset/reentrancy/spank_chain_payment.sol#166) is not in mixedCase
Parameter '_startIndex' of ECTools.substring (/dataset/reentrancy/spank_chain_payment.sol#166) is not in mixedCase
Parameter '_endIndex' of ECTools.substring (/dataset/reentrancy/spank_chain_payment.sol#166) is not in mixedCase
Parameter '_owner' of StandardToken.balanceOf (/dataset/reentrancy/spank_chain_payment.sol#204) is not in mixedCase
Parameter '_to' of StandardToken.transfer (/dataset/reentrancy/spank_chain_payment.sol#181) is not in mixedCase
Parameter '_value' of StandardToken.transfer (/dataset/reentrancy/spank_chain_payment.sol#181) is not in mixedCase
Parameter '_from' of StandardToken.transferFrom (/dataset/reentrancy/spank_chain_payment.sol#193) is not in mixedCase
Parameter '_to' of StandardToken.transferFrom (/dataset/reentrancy/spank_chain_payment.sol#193) is not in mixedCase
Parameter '_value' of StandardToken.transferFrom (/dataset/reentrancy/spank_chain_payment.sol#193) is not in mixedCase
Parameter '_spender' of StandardToken.approve (/dataset/reentrancy/spank_chain_payment.sol#208) is not in mixedCase
Parameter '_value' of StandardToken.approve (/dataset/reentrancy/spank_chain_payment.sol#208) is not in mixedCase
Parameter '_owner' of StandardToken.allowance (/dataset/reentrancy/spank_chain_payment.sol#214) is not in mixedCase
Parameter '_spender' of StandardToken.allowance (/dataset/reentrancy/spank_chain_payment.sol#214) is not in mixedCase
Parameter '_initialAmount' of HumanStandardToken. (/dataset/reentrancy/spank_chain_payment.sol#238) is not in mixedCase
Parameter '_tokenName' of HumanStandardToken. (/dataset/reentrancy/spank_chain_payment.sol#239) is not in mixedCase
Parameter '_decimalUnits' of HumanStandardToken. (/dataset/reentrancy/spank_chain_payment.sol#240) is not in mixedCase
Parameter '_tokenSymbol' of HumanStandardToken. (/dataset/reentrancy/spank_chain_payment.sol#241) is not in mixedCase
Parameter '_spender' of HumanStandardToken.approveAndCall (/dataset/reentrancy/spank_chain_payment.sol#251) is not in mixedCase
Parameter '_value' of HumanStandardToken.approveAndCall (/dataset/reentrancy/spank_chain_payment.sol#251) is not in mixedCase
Parameter '_extraData' of HumanStandardToken.approveAndCall (/dataset/reentrancy/spank_chain_payment.sol#251) is not in mixedCase
Parameter '_lcID' of LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#380) is not in mixedCase
Parameter '_partyI' of LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#381) is not in mixedCase
Parameter '_confirmTime' of LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#382) is not in mixedCase
Parameter '_token' of LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#383) is not in mixedCase
Parameter '_balances' of LedgerChannel.createChannel (/dataset/reentrancy/spank_chain_payment.sol#384) is not in mixedCase
Function 'LedgerChannel.LCOpenTimeout' (/dataset/reentrancy/spank_chain_payment.sol#419-434) is not in mixedCase
Parameter '_lcID' of LedgerChannel.LCOpenTimeout (/dataset/reentrancy/spank_chain_payment.sol#419) is not in mixedCase
Parameter '_lcID' of LedgerChannel.joinChannel (/dataset/reentrancy/spank_chain_payment.sol#436) is not in mixedCase
Parameter '_balances' of LedgerChannel.joinChannel (/dataset/reentrancy/spank_chain_payment.sol#436) is not in mixedCase
Parameter '_lcID' of LedgerChannel.deposit (/dataset/reentrancy/spank_chain_payment.sol#462) is not in mixedCase
Parameter '_balance' of LedgerChannel.deposit (/dataset/reentrancy/spank_chain_payment.sol#462) is not in mixedCase
Parameter '_lcID' of LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#493) is not in mixedCase
Parameter '_sequence' of LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#494) is not in mixedCase
Parameter '_balances' of LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#495) is not in mixedCase
Parameter '_sigA' of LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#496) is not in mixedCase
Parameter '_sigI' of LedgerChannel.consensusCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#497) is not in mixedCase
Parameter '_lcID' of LedgerChannel.updateLCstate (/dataset/reentrancy/spank_chain_payment.sol#548) is not in mixedCase
Parameter '_VCroot' of LedgerChannel.updateLCstate (/dataset/reentrancy/spank_chain_payment.sol#550) is not in mixedCase
Parameter '_sigA' of LedgerChannel.updateLCstate (/dataset/reentrancy/spank_chain_payment.sol#551) is not in mixedCase
Parameter '_sigI' of LedgerChannel.updateLCstate (/dataset/reentrancy/spank_chain_payment.sol#552) is not in mixedCase
Parameter '_lcID' of LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#613) is not in mixedCase
Parameter '_vcID' of LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#614) is not in mixedCase
Parameter '_proof' of LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#615) is not in mixedCase
Parameter '_partyA' of LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#616) is not in mixedCase
Parameter '_partyB' of LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#617) is not in mixedCase
Parameter '_bond' of LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#618) is not in mixedCase
Parameter '_balances' of LedgerChannel.initVCstate (/dataset/reentrancy/spank_chain_payment.sol#619) is not in mixedCase
Parameter '_lcID' of LedgerChannel.settleVC (/dataset/reentrancy/spank_chain_payment.sol#660) is not in mixedCase
Parameter '_vcID' of LedgerChannel.settleVC (/dataset/reentrancy/spank_chain_payment.sol#661) is not in mixedCase
Parameter '_partyA' of LedgerChannel.settleVC (/dataset/reentrancy/spank_chain_payment.sol#663) is not in mixedCase
Parameter '_partyB' of LedgerChannel.settleVC (/dataset/reentrancy/spank_chain_payment.sol#664) is not in mixedCase
Parameter '_lcID' of LedgerChannel.closeVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#722) is not in mixedCase
Parameter '_vcID' of LedgerChannel.closeVirtualChannel (/dataset/reentrancy/spank_chain_payment.sol#722) is not in mixedCase
Parameter '_lcID' of LedgerChannel.byzantineCloseChannel (/dataset/reentrancy/spank_chain_payment.sol#753) is not in mixedCase
Function 'LedgerChannel._isContained' (/dataset/reentrancy/spank_chain_payment.sol#816-831) is not in mixedCase
Parameter '_hash' of LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816) is not in mixedCase
Parameter '_proof' of LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816) is not in mixedCase
Parameter '_root' of LedgerChannel._isContained (/dataset/reentrancy/spank_chain_payment.sol#816) is not in mixedCase
Variable 'LedgerChannel.Channels' (/dataset/reentrancy/spank_chain_payment.sol#377) is not in mixedCase
Reference: https://github.com/trailofbits/slither/wiki/Detectors-Documentation#conformance-to-solidity-naming-conventions[0m
INFO:Slither:/dataset/reentrancy/spank_chain_payment.sol analyzed (5 contracts), 120 result(s) found